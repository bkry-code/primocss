@if $use-layout-grids == true {
  /// LAYOUT - Flex grid

  //
  // Sets the grid spacing value used for gutters
  //

  $grid-max-columns:     12 !default;
  $grid-column-value:    100% / $grid-max-columns !default;
  $grid-gutters:         $global-spacing-unit !default;


  //
  // Flex grid based on the work by Heydon Pickering
  // https://github.com/Heydon/fukol-grids. Can be used independently or
  // inconjunction with the column grid classes for explict widths.
  //

  .grid-row {
    // sass-lint:disable-block no-vendor-prefixes, no-misspelled-properties
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    display: flex;

    flex: {
      basis: auto;
      direction: row;
      grow: 0;
      shrink: 1;
      wrap: wrap;
    }

    margin: {
      left: -#{$grid-gutters / 2};
      right: -#{$grid-gutters / 2};
    }

    //
    // Applies generic flex to all children of grid-row.
    //

    > * {
      flex: {
        basis: auto;
        grow: 0;
        shrink: 1;
      }

      margin: {
        left: $grid-gutters / 2;
        right: $grid-gutters / 2;
        top: 0;
      }

      //
      // Sets a margin offests when on responsive is true. Also sets a
      // blanket 100% width on all grid items when at the md 768px breakpoint.
      //
      // 1. Sets the Lobotomized owl selector to work on mobile.
      //

      @if $global-responsive == true {
        @include set-breakpoint-max(md) {
          flex-basis: calc(100% - #{$grid-gutters} / 2);
          max-width: calc(100% - #{$grid-gutters} / 2);
        }
      } // endif

      //
      // Creates standard grid columns and each column prefixed
      // with xs, sm, md, lg, xl that coresponds to a max-width breakpoint.
      // E.g setting .grid-md-col-6 sets a width of 50%
      //

      @for $grid-col from 1 through $grid-max-columns {

        $grid-width: $grid-column-value * $grid-col;

        &.grid-col-#{$grid-col} {
          flex-basis: calc(#{$grid-width} - #{$grid-gutters});
          max-width: calc(#{$grid-width} - #{$grid-gutters});

          @if $grid-col == 12 {
            + * {
              margin-top: $grid-gutters;
            }
          }

          &--no-gutter {
            flex-basis: $grid-width;
            margin: 0;
            margin-top: 0;
            max-width: $grid-width;
          }
        }
      }

      @if $global-responsive == true {
        @each $breakpoint in map-keys($global-breakpoints) {
          @for $grid-col from 1 through $grid-max-columns {

            $grid-width: $grid-column-value * $grid-col;

            @include set-breakpoint-min($breakpoint) {
              $prefix: breakpoint-min-prefix($breakpoint, $global-breakpoints);

              &.grid#{$prefix}-col-#{$grid-col} {
                flex-basis: calc(#{$grid-width} - #{$grid-gutters});
                margin-top: 0;
                max-width: calc(#{$grid-width} - #{$grid-gutters});

                @if $grid-col == 12 {
                  + * {
                    margin-top: $grid-gutters;
                  }
                }

                &--no-gutter {
                  flex-basis: $grid-width;
                  margin: 0;
                  margin-top: 0;
                  max-width: $grid-width;
                }
              }
            }
          } // endif
        }
      }

      //
      // Offset classes
      //

      @for $offset-col from 1 through $grid-max-columns {

        $offset-width: $grid-column-value * $offset-col;

        &.offset-col-#{$offset-col} {
          margin-left: calc(#{$offset-width} + #{$grid-gutters} / 2);
        }

        @each $breakpoint in map-keys($global-breakpoints) {
          @if $global-responsive == true {
            @include set-breakpoint-min($breakpoint) {
              $prefix: breakpoint-min-prefix($breakpoint, $global-breakpoints);

              &.offset#{$prefix}-col-#{$offset-col} {
                margin-left: calc(#{$offset-width} + #{$grid-gutters} / 2);
              }
            }
          }
        }
      }
    }

    //
    // Removes all gutters on grid rows and columns.
    //

    &--no-gutter {
      margin: {
        left: 0;
        right: 0;
        top: 0;
      }

      > * {
        margin: {
          left: 0;
          right: 0;
          top: 0 !important;
        }
      }
    }

    //
    // Sets height to 100%.
    //

    &--full-height {
      height: 100%;
    }

    //
    // Alignment classes. Start, center and end all flex items hotizontally
    // regardless of width.
    //

    &--start {
      -ms-flex-pack: start;
      -webkit-box-pack: start;
      justify-content: flex-start;
    }

    &--center {
      -ms-flex-pack: center;
      -webkit-box-pack: start;
      justify-content: center;
    }

    &--end {
      -ms-flex-pack: end;
      -webkit-box-pack: start;
      justify-content: flex-end;
    }

    &--top {
      -ms-flex-align: start;
      -webkit-box-align: start;
      align-items: flex-start;
    }

    &--middle {
      -ms-flex-align: center;
      -webkit-box-align: center;
      align-items: center;
    }

    &--bottom {
      -ms-flex-align: end;
      -webkit-box-align: end;
      align-items: flex-end;
    }
  }
} // endif
