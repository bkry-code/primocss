@if $use-layout-grids == true {
  /// LAYOUT - Flex grid

  //
  // Sets the grid spacing value used for gutters
  //

  $grid-max-columns:     12 !default;
  $grid-column-value:    100% / $grid-max-columns;



  //
  // Flex grid based on the work by Heydon Pickering
  // https://github.com/Heydon/fukol-grids. Can be used independently or
  // inconjunction with the column grid classes for explict widths.
  //

  .grid-row {
    box-direction: normal;
    box-orient: horizontal;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-left: -#{$global-spacing-unit};
    margin-right: -#{$global-spacing-unit};

    //
    // Applies generic flex to all children of grid-row.
    //

    > * {
      flex: 1 0 auto;
      margin-left: $global-spacing-unit;
      margin-right: $global-spacing-unit;
      margin-top: 0;

      //
      // Sets a margin offests when on responsive is true. Also sets a
      // blanket 100% width on all grid items when at the md 768px breakpoint.
      //
      // 1. Sets the Lobotomized owl selector to work on mobile.
      //

      @if $global-responsive == true {
        @include set-breakpoint-max(md) {
          flex-basis: calc(100% - #{$global-spacing-unit-lg});
          max-width: calc(100% - #{$global-spacing-unit-lg});
        }
      } // endif

      //
      // Creates standard grid columns and each column prefixed
      // with xs, sm, md, lg, xl that coresponds to a max-width breakpoint.
      // E.g setting .grid-md-col-6 sets a width of 50%
      //

      @for $grid-col from 1 through $grid-max-columns {

        $grid-width: $grid-column-value * $grid-col;

        &.grid-col-#{$grid-col} {
          flex-basis: calc(#{$grid-width} - #{$global-spacing-unit-lg});
          max-width: calc(#{$grid-width} - #{$global-spacing-unit-lg});
        }
      }

      @if $global-responsive == true {
        @each $breakpoint in map-keys($global-breakpoints) {
          @for $grid-col from 1 through $grid-max-columns {

            $grid-width: $grid-column-value * $grid-col;

            @include set-breakpoint-min($breakpoint) {
              $prefix: breakpoint-min-prefix($breakpoint, $global-breakpoints);

              &.grid#{$prefix}-col-#{$grid-col} {
                flex-basis: calc(#{$grid-width} - #{$global-spacing-unit-lg});
                max-width: calc(#{$grid-width} - #{$global-spacing-unit-lg});
              }
            }
          } // endif
        }
      }

      //
      // Offset classes
      //

      @for $offset-col from 1 through $grid-max-columns {

        $offset-width: $grid-column-value * $offset-col;

        &.offset-col-#{$offset-col} {
          margin-left: calc(#{$offset-width} + #{$global-spacing-unit});
        }
      }
    }

    //
    // Removes all gutters on grid rows and columns.
    //

    &--no-gutters {
      margin-left: 0;
      margin-right: 0;

      > * {
        margin-left: 0;
        margin-right: 0;
      }
    }

    //
    // Start, center and end all flex items hotizontally regardless of width.
    //

    &--start {
      align-items: flex-start;
      justify-content: flex-start;
    }

    &--center {
      align-items: center;
      justify-content: center;
    }

    &--end {
      align-items: flex-end;
      justify-content: flex-end;
    }
  }
} // endif
